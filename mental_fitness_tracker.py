# -*- coding: utf-8 -*-
"""Mental_Fitness_Tracker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbcOAwxteeZ7erQBtKXWNWBQZd9A4IXm

#**ðŸ¤–  ðŸ‡²  ðŸ‡ª ðŸ‡³ ðŸ‡¹ ðŸ‡¦ ðŸ‡± __  ðŸ‡« ðŸ‡® ðŸ‡¹ ðŸ‡³ ðŸ‡ª ðŸ‡¸ ðŸ‡¸__   ðŸ‡¹ ðŸ‡· ðŸ‡¦ ðŸ‡¨ ðŸ‡° ðŸ‡ª ðŸ‡· ðŸ¤–**

---

### **Importing Libraries and Suppressing Warnings"**
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
# import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

"""###**Mounting Google Drive**"""

from google.colab import drive
drive.mount('/content/drive')

"""###**Reading Data Files**"""

df1=pd.read_csv("/content/drive/MyDrive/Mental_Health_Fitness_Tracker/mental-and-substance-use-as-share-of-disease.csv")
df2=pd.read_csv("/content/drive/MyDrive/Mental_Health_Fitness_Tracker/prevalence-by-mental-and-substance-use-disorder.csv")

"""###**Displaying Data**"""

df1.head()

df2.tail()

df1.head(10)

"""###**Merging Dataframes and Previewing Merged Data**"""

data = pd.merge(df1, df2)
data.head()

"""###**Checking for Null Values in the Merged Data"**"""

data.isnull().sum()

data.drop('Code',axis=1,inplace=True)

data.head()

data.size,data.shape

"""###**Renaming Columns in the Merged Data**"""

data.set_axis(['Country','Year','Schizophrenia', 'Bipolar_disorder', 'Eating_disorder','Anxiety','drug_usage','depression','alcohol','mental_fitness'], axis='columns', inplace=True)

data.head()

"""###**Visualizing Correlation in the Merged Data"**"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Reds')
plt.plot()

sns.jointplot(x='Schizophrenia', y='mental_fitness', data=data, kind='reg', color='r')
plt.show()

sns.jointplot(x='Bipolar_disorder',y='mental_fitness',data=data,kind='reg',color='r')
plt.show()

sns.jointplot(x='Eating_disorder',y='mental_fitness',data=data,kind='reg',color='r')
plt.show()

sns.jointplot(x='Anxiety',y='mental_fitness',data=data,kind='reg',color='orange')
plt.show()

sns.jointplot(x='drug_usage',y='mental_fitness',data=data,kind='reg',color='orange')
plt.show()

sns.jointplot(x='depression',y='mental_fitness',data=data,kind='reg',color='purple')
plt.show()

sns.jointplot(x='alcohol',y='mental_fitness',data=data,kind='reg',color='purple')
plt.show()

sns.pairplot(data,corner=True)
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data, values='mental_fitness', names='Year')
fig.show()

fig = px.pie(data, values='alcohol', names='Year')
fig.show()

fig=px.bar(data.head(10),x='Year',y='mental_fitness',color='Year',template='ggplot2')
fig.show()

fig = px.line(data, x="Year", y="mental_fitness", color='Country',markers=True,color_discrete_sequence=['red','blue'],template='plotly')
fig.show()

df = data.copy()

df.head()

df.info()

"""###**Label Encoding Categorical Data**"""

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in df.columns:
    if df[i].dtype == 'object':
        df[i]=l.fit_transform(df[i])

X = df.drop('mental_fitness',axis=1)
y = df['mental_fitness']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.2, random_state=2)

"""###**Linear Regression Model Evaluation**"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(xtrain,ytrain)

# model evaluation for training set
ytrain_pred = lr.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))
r2 = r2_score(ytrain, ytrain_pred)

print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
ytest_pred = lr.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
r2 = r2_score(ytest, ytest_pred)

print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""###**Random Forest Regression Model Evaluation"**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Train the RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain, ytrain)

# Model evaluation for the training set
ytrain_pred = rf.predict(xtrain)
mse_train = mean_squared_error(ytrain, ytrain_pred)
rmse_train = np.sqrt(mse_train)
r2_train = r2_score(ytrain, ytrain_pred)
print("The model performance for the training set")
print("--------------------------------------")
print('MSE is {}'.format(mse_train))
print('RMSE is {}'.format(rmse_train))
print('R2 score is {}'.format(r2_train))
print("\n")

# Model evaluation for the testing set
ytest_pred = rf.predict(xtest)
mse_test = mean_squared_error(ytest, ytest_pred)
rmse_test = np.sqrt(mse_test)
r2_test = r2_score(ytest, ytest_pred)
print("The model performance for the testing set")
print("--------------------------------------")
print('MSE is {}'.format(mse_test))
print('RMSE is {}'.format(rmse_test))
print('R2 score is {}'.format(r2_test))
print("\n")

print("Welcome to Mental Fitness Tracker!\nFill the detail to check your mental fitness!")
country= l.fit_transform([input('Enter Your country Name:')])
year= int(input("Enter the Year:"))
schi= (float(input("Enter your Schizophrenia rate in %:")))
bipo_dis= (float(input("Enter your Bipolar disorder rate in %:")))
eat_dis= (float(input("Enter your Eating disorder rate in %:")))
anx= (float(input("Enter your Anxiety rate in %:")))
drug_use= (float(input("Enter your Drug Usage rate in per year %:")))
depr= (float(input("Enter your Depression rate in %:")))
alch= (float(input("Enter your Alcohol Consuming rate per year in %:")))


prediction= rf.predict([[country,year,schi,bipo_dis,eat_dis,anx,drug_use,depr,alch]])
print("Your Mental Fitness is {}%".format(prediction*10))